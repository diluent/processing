{"version":3,"sources":["source/clock.png","source/dollar.png","source/house.png","timeInfo/svg/time1.png","timeInfo/svg/time2.png","timeInfo/svg/time3.png","timeInfo/svg/time4.png","timeInfo/svg/time5.png","menu/Menu.js","timeInfo/TimeInfo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Menu","_ref","onClick","react_default","a","createElement","className","src","clock","dollar","house","TimeInfo","time1","time2","time3","time4","time5","App","state","view","setView","_this","setState","menu_Menu","this","timeInfo_TimeInfo","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,wTCgBzBC,SAVF,SAAAC,GAAe,IAAbC,EAAaD,EAAbC,QACb,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAOF,UAAU,UAAUJ,QAAS,kBAAMA,EAAQ,WAC5DC,EAAAC,EAAAC,cAAA,OAAKE,IAAKE,IAAQH,UAAU,YAC5BH,EAAAC,EAAAC,cAAA,OAAKE,IAAKG,IAAOJ,UAAU,yGCSpBK,MAZf,WACE,OACER,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKK,IAAON,UAAU,eAC3BH,EAAAC,EAAAC,cAAA,OAAKE,IAAKM,IAAOP,UAAU,eAC3BH,EAAAC,EAAAC,cAAA,OAAKE,IAAKO,IAAOR,UAAU,eAC3BH,EAAAC,EAAAC,cAAA,OAAKE,IAAKQ,IAAOT,UAAU,eAC3BH,EAAAC,EAAAC,cAAA,OAAKE,IAAKS,IAAOV,UAAU,iBCWlBW,oNApBbC,MAAQ,CACNC,KAAM,QAGRC,QAAU,SAACD,GACTE,EAAKC,SAAS,CAACH,kFAIf,OACEhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACkB,EAAD,CAAMrB,QAASsB,KAAKJ,UACpBjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACQ,SAApBkB,KAAKN,MAAMC,MAAmBhB,EAAAC,EAAAC,cAACoB,EAAD,eAdvBC,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.191b70e0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/clock.fc1702e8.png\";","module.exports = __webpack_public_path__ + \"static/media/dollar.a5159f79.png\";","module.exports = __webpack_public_path__ + \"static/media/house.fac1dfc2.png\";","module.exports = __webpack_public_path__ + \"static/media/time1.47fc8582.png\";","module.exports = __webpack_public_path__ + \"static/media/time2.b1a3afa0.png\";","module.exports = __webpack_public_path__ + \"static/media/time3.19a28348.png\";","module.exports = __webpack_public_path__ + \"static/media/time4.652a2b36.png\";","module.exports = __webpack_public_path__ + \"static/media/time5.296a8a95.png\";","import React from 'react';\nimport clock from '../source/clock.png';\nimport dollar from '../source/dollar.png';\nimport house from '../source/house.png';\nimport './styles.css';\n\nconst Menu = ({onClick}) => {\n  return (\n    <div className=\"menu\">\n        <img src={clock} className=\"menuImg\" onClick={() => onClick('time')}/>\n        <img src={dollar} className=\"menuImg\" />\n        <img src={house} className=\"menuImg\" />\n    </div>\n  );\n}\n\nexport default Menu;\n","import React from 'react';\nimport time1 from './svg/time1.png';\nimport time2 from './svg/time2.png';\nimport time3 from './svg/time3.png';\nimport time4 from './svg/time4.png';\nimport time5 from './svg/time5.png';\nimport './styles.css';\n\nfunction TimeInfo() {\n  return (\n    <div className=\"image-container\">\n      <img src={time1} className=\"part part1\" />\n      <img src={time2} className=\"part part2\" />\n      <img src={time3} className=\"part part3\" />\n      <img src={time4} className=\"part part4\" />\n      <img src={time5} className=\"part part5\" />\n    </div>\n  );\n}\n\nexport default TimeInfo;\n","import React from 'react';\nimport Menu from './menu/Menu';\nimport TimeInfo from './timeInfo/TimeInfo';\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    view: null,\n  }\n\n  setView = (view) => {\n    this.setState({view});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Menu onClick={this.setView} />\n        <div className=\"info\">\n          {this.state.view === 'time' && <TimeInfo />}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}